@page "/ComicListPage"
@page "/ComicListPage/{currentComicListPage:int}"

@using ComicReaderWebCore.Data
@using ComicReaderWebCore.Models
@inject IComicApiCallService ApiCallService
@inject IComicStateProvider ComicStateProvider
@inject IComicListStateProvider ComicListStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<Document Title="@Title" />
@if (comiclist == null)
{
    <div id="ComicPage">
        <div id="ComicHeader">Comics available</div>
        <div id="TableDiv">
            <p><em>Loading...</em></p>
        </div>
    </div>
    <div id="PagingBar"></div>
    <div id="Footer"></div>
}
else
{
    <div id="ComicPage">

        <div id="ComicHeader">
            Comics available<div id="Searcher">
                <button class="btn" type="button" @onclick="@SetSearchActive" width="30" height="30" id="SearchIcon" />
                @if (SearchActive == true)
                {
                    <input id="SearchText" type="text" @bind="@this.SearchText" @onkeyup="@SearchBoxKeyPress" />
                    <button class="btn" type="button" @onclick="@SearchClick">Search</button>
                    <button class="btn" type="button" @onclick="@ClearClick">Clear</button>
                }
            </div>
        </div>

        <div id="TableDiv">
            <div id="ComicTable">
                @foreach (var comic in comiclist.Files)
                {
                    <div class="ComicCell" @onclick="(() => OpenComic(comic))">
                        <a>
                            <p class="ComicThumbnail">
                                <img alt="Comic Thumbnail" src="@comic.ThumbUrl" />
                            </p>
                            <p class="ComicLink">
                                @comic.Title
                            </p>
                        </a>
                    </div>
                }
            </div>
        </div>
        <div id="prevPage">
            <div class="paging" @onclick="PreviousPage">&lt;</div>
        </div>
        <div id="paging">
            <ul id="pagingLinks">
                @if (currentComicListPage != 1)
                {
                    <li class="paging" @onclick="FirstPage">First</li>
                }
                @if (currentComicListPage > 3)
                {
                    <li class="paging" @onclick="(() => GoToPage(currentComicListPage - 3))">@(currentComicListPage - 3)</li>
                }
                @if (currentComicListPage > 2)
                {
                    <li class="paging" @onclick="(() => GoToPage(currentComicListPage - 2))">@(currentComicListPage - 2)</li>
                }
                @if (currentComicListPage > 1)
                {
                    <li class="paging" @onclick="(() => GoToPage(currentComicListPage - 1))">@(currentComicListPage - 1)</li>
                }
                <li class="paging">Page @currentComicListPage of @comiclist.TotalPages</li>
                @if (currentComicListPage + 1 < comiclist.TotalPages)
                {
                    <li class="paging" @onclick="(() => GoToPage(currentComicListPage + 1))">@(currentComicListPage + 1)</li>
                }
                @if (currentComicListPage + 2 < comiclist.TotalPages)
                {
                    <li class="paging" @onclick="(() => GoToPage(currentComicListPage + 2))">@(currentComicListPage + 2)</li>
                }
                @if (currentComicListPage + 3 < comiclist.TotalPages)
                {
                    <li class="paging" @onclick="(() => GoToPage(currentComicListPage + 3))">@(currentComicListPage + 3)</li>
                }
                @if (currentComicListPage != comiclist.TotalPages)
                {
                    <li class="paging" @onclick="LastPage">Last</li>
                }
            </ul>
        </div>
        <div id="nextPage">
            <div class="paging" @onclick="NextPage">&gt;</div>
        </div>
    </div>
    <div id="PagingBar"></div>
    <div id="Footer"></div>
}

@code {
    #region fields
    private ComicListModel comiclist;
    private string SearchText;
    private bool SearchActive { get; set; } = false;

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public int currentComicListPage { get; set; }
    #endregion

    #region Methods called at Initialization
    /// <summary>
    /// Checks whether that ComicList page was visited in the current session.
    /// State is returend if this is true
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        if (ComicListStateProvider.CurrentListPage <= 1 && currentComicListPage > 1)
        {
            ComicListStateProvider.CurrentListPage = currentComicListPage;
        }
        else if ((ComicListStateProvider.CurrentListPage - 1) == (currentComicListPage - 1) || (ComicListStateProvider.CurrentListPage + 1) == (currentComicListPage + 1))
        {
            currentComicListPage = ComicListStateProvider.CurrentListPage;
        }
        else
        {
            ComicListStateProvider.CurrentListPage = currentComicListPage;
        }

        if (!String.IsNullOrEmpty(ComicListStateProvider.SearchText))
        {
            SearchText = ComicListStateProvider.SearchText;
        }
        comiclist = await ApiCallService.GetFolderListAsync(SearchText, ComicListStateProvider.CurrentListPage);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetTitleAsync();
        }
    }
    #endregion

    #region Page navigation methods
    /// <summary>
    /// Page browsing does not go beyond last list page.
    /// State is saved to ComicListStateProvider which contains CurrentListPage and Eventhandlers for when page was changed.
    /// </summary>
    private async Task PreviousPage()
    {
        if (currentComicListPage <= 0)
        {
            comiclist = await ApiCallService.GetFolderListAsync(SearchText, 0);
            NavigationManager.NavigateTo($"ComicListPage/{currentComicListPage}");
        }
        else
        {
            comiclist = await ApiCallService.GetFolderListAsync(SearchText, currentComicListPage - 1);
            currentComicListPage -= 1;
            NavigationManager.NavigateTo($"ComicListPage/{currentComicListPage}");
        }
        ComicListStateProvider.CurrentListPage = currentComicListPage;
        ComicListStateProvider.PageChangeEventArgs args = new ComicListStateProvider.PageChangeEventArgs();
        args.Page = currentComicListPage;
        ComicListStateProvider.OnComicListPageChanged(this, args);
        await SetTitleAsync();
    }

    private async Task NextPage()
    {
        if (currentComicListPage >= comiclist.TotalPages)
        {
            comiclist = await ApiCallService.GetFolderListAsync(SearchText, comiclist.TotalPages);
            NavigationManager.NavigateTo($"ComicListPage/{currentComicListPage}");
        }
        else
        {
            comiclist = await ApiCallService.GetFolderListAsync(SearchText, currentComicListPage + 1);
            currentComicListPage += 1;
            NavigationManager.NavigateTo($"ComicListPage/{currentComicListPage}");
        }
        ComicListStateProvider.CurrentListPage = currentComicListPage;
        ComicListStateProvider.PageChangeEventArgs args = new ComicListStateProvider.PageChangeEventArgs();
        args.Page = currentComicListPage;
        ComicListStateProvider.OnComicListPageChanged(this, args);
        await SetTitleAsync();
    }

    private async Task FirstPage()
    {
        comiclist = await ApiCallService.GetFolderListAsync(SearchText, 0);
        currentComicListPage = 0;
        NavigationManager.NavigateTo($"ComicListPage/{currentComicListPage}");
        ComicListStateProvider.CurrentListPage = currentComicListPage;
        ComicListStateProvider.PageChangeEventArgs args = new ComicListStateProvider.PageChangeEventArgs();
        args.Page = currentComicListPage;
        ComicListStateProvider.OnComicListPageChanged(this, args);
        await SetTitleAsync();
    }

    private async Task LastPage()
    {

        comiclist = await ApiCallService.GetFolderListAsync(SearchText, comiclist.TotalPages);
        currentComicListPage = comiclist.TotalPages;
        NavigationManager.NavigateTo($"ComicListPage/{currentComicListPage}");
        ComicListStateProvider.CurrentListPage = currentComicListPage;
        ComicListStateProvider.PageChangeEventArgs args = new ComicListStateProvider.PageChangeEventArgs();
        args.Page = currentComicListPage;
        ComicListStateProvider.OnComicListPageChanged(this, args);
        await SetTitleAsync();
    }

    /// <summary>
    /// Method to go to specific comic list page
    /// </summary>
    /// <param name="page">Int, representing the comic list page number</param>
    private async Task GoToPage(int page)
    {
        currentComicListPage = page;
        if (page <= 0)
        {
            NavigationManager.NavigateTo($"ComicListPage/0");
            comiclist = await ApiCallService.GetFolderListAsync(SearchText, 0);
        }
        else if (page >= comiclist.TotalPages)
        {
            NavigationManager.NavigateTo($"ComicListPage/{comiclist.TotalPages}");
            comiclist = await ApiCallService.GetFolderListAsync(SearchText, comiclist.TotalPages);
        }
        else
        {
            NavigationManager.NavigateTo($"ComicListPage/{currentComicListPage}");
            comiclist = await ApiCallService.GetFolderListAsync(SearchText, page);
        }
        ComicListStateProvider.CurrentListPage = currentComicListPage;
        ComicListStateProvider.PageChangeEventArgs args = new ComicListStateProvider.PageChangeEventArgs();
        args.Page = currentComicListPage;
        ComicListStateProvider.OnComicListPageChanged(this, args);
        await SetTitleAsync();
    }
    #endregion

    #region searching
    private async Task Search()
    {
        ComicListStateProvider.SearchText = SearchText;
        ComicListStateProvider.PageChangeEventArgs args = new ComicListStateProvider.PageChangeEventArgs();
        args.SearchText = SearchText;
        args.Page = 0;
        comiclist = await ApiCallService.GetFolderListAsync(SearchText, 0);
        currentComicListPage = 0;
        NavigationManager.NavigateTo($"ComicListPage/{currentComicListPage}");
        ComicListStateProvider.CurrentListPage = currentComicListPage;
        ComicListStateProvider.OnComicListPageChanged(this, args);
        await SetTitleAsync();
    }

    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            await Search();
        }

        await SetTitleAsync();
    }

    protected async Task SearchClick(MouseEventArgs ev)
    {
        await Search();

        await SetTitleAsync();
    }

    protected void ClearClick(MouseEventArgs ev)
    {
        SearchText = "";
    }

    protected void SetSearchActive(MouseEventArgs ev)
    {
        if (SearchActive == false)
        { SearchActive = true; }
        else
        { SearchActive = false; }
    }
    #endregion

    #region Open Comic method
    /// <summary>
    /// When clicking on a thumbnail, the specific comic is opened.
    /// Normally on page 0. The Comic page checks whether the comic was already visited and returns to the last page visited.
    /// </summary>
    /// <param name="comic">ComicModel, representing the comic that was opened</param>
    private void OpenComic(ComicModel comic)
    {
        ComicStateProvider.CurrentComic = comic;
        NavigationManager.NavigateTo($"ComicPage/{comic.Path.ToString().Remove(0, 1)}/0");
    }
    #endregion

    #region private methods
    private async Task SetTitleAsync()
    {
        Title = $"Available comics - Page {ComicListStateProvider.CurrentListPage}";
        await JSRuntime.InvokeVoidAsync("DocumentInterop.setDocumentTitle", Title);
    }
    #endregion
}
