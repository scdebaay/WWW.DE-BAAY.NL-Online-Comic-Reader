@page "/"
@using ComicReaderWebCore.Data
@inject IComicListStateProvider ComicListStateProvider
@inject NavigationManager NavigationManager

<div id="ComicPage">
    <div id="ComicHeader">Comics available</div>
    <div id="TableDiv">
        <h1>Hello, world!</h1>

        <p>Welcome to the Comic Cloud Web Reader.</p>
        <p>
            Proof of concept website where my collection of digital comics can be found.<rb />
            The site is based on Blazor pages and uses a self-developed API to stream comic pages from CBR/CBZ format.
        </p>
        <p>
            The link below takes you to the comic list. You can browse the list (currently 118 pages).<br />
            Click on any comic to read the comic. The site should remember which comic is read and to which page you've gotten.<br />
            This data is session based, so may be lost when navigating away from the site for longer periods.
        </p>
        <p>
            Have fun!
        </p>
        <h3>
            <NavLink href="@Href">
                To the comic list
            </NavLink>
        </h3>
        <h3>or search the comic list:</h3>
        <div>
            <input type="text" @bind="@this.SearchText" @onkeyup="@SearchBoxKeyPress" />
            <button class="btn" type="button" @onclick="@SearchClick">Search</button>
            <button class="btn" type="button" @onclick="@ClearClick">Clear</button>
        </div>

    </div>
</div>
<div id="PagingBar"></div>
<div id="Footer"></div>

@code {
    protected override void OnInitialized()
    {
        if (ComicListStateProvider.CurrentListPage <= 0)
        {
            CurrentComicListPage = 0;
        }
        else
        {
            CurrentComicListPage = ComicListStateProvider.CurrentListPage;
        }
        ComicListStateProvider.CurrentListPage = CurrentComicListPage;
        Href = $"ComicListPage/{CurrentComicListPage}";
        ComicListStateProvider.ComicListPageChanged += HandlePageChange;
    }

    public int CurrentComicListPage { get; set; }
    private string Href { get; set; }

    private void HandlePageChange(object sender, ComicListStateProvider.PageChangeEventArgs e)
    {
        Href = $"ComicListPage/{e.Page}";
        InvokeAsync(StateHasChanged);
    }

    private string SearchText { get; set; }

    private void Search()
    {
        ComicListStateProvider.SearchText = SearchText;
        ComicListStateProvider.PageChangeEventArgs args = new ComicListStateProvider.PageChangeEventArgs();
        args.SearchText = SearchText;
        ComicListStateProvider.OnComicListPageChanged(this, args);
        NavigationManager.NavigateTo(Href);
    }

    protected void SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            Search();
        }
    }

    protected void SearchClick(MouseEventArgs ev)
    {
        Search();
    }

    protected void ClearClick(MouseEventArgs ev)
    {
        SearchText = "";
    }
}


