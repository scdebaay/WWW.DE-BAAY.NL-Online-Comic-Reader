@using ComicReaderWebCore.Data
@inject IComicListStateProvider ComicListStateProvider

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">ComicReaderWebCore</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="@Href">
                <span class="oi oi-star" aria-hidden="true"></span> Comic list
            </NavLink>
        </li>
    </ul>
</div>

@code {
    protected override void OnInitialized()
    {
        if (ComicListStateProvider.CurrentListPage == 1)
        {
            CurrentComicListPage = 1;
        }
        else
        {
            CurrentComicListPage = ComicListStateProvider.CurrentListPage;
        }
        ComicListStateProvider.CurrentListPage = CurrentComicListPage;
        Href = $"ComicListPage/{CurrentComicListPage}";
        ComicListStateProvider.ComicListPageChanged += HandlePageChange;
    }

    public int CurrentComicListPage { get; set; }
    private string Href { get; set; }

    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void HandlePageChange(object sender, ComicListStateProvider.PageChangeEventArgs e)
    {
        Href = $"ComicListPage/{e.Page}";
        InvokeAsync(StateHasChanged);
    }
}
